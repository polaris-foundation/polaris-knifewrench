SERVICE_FOLDERS_MASTER: &SERVICE_FOLDERS
  SERVICE_FOLDERS: "api adapter-worker"

version: 2.1
jobs:
  test:
    docker:
      - image: cimg/python:3.9
    environment:
      <<: *SERVICE_FOLDERS
    steps:
      - checkout
      - run:
          name: Set up tox tests
          command: |
            poetry self update
            pip install --upgrade tox
      - restore_cache:
          keys:
            - v1-poetry-api-deps-{{ checksum "api/poetry.lock" }}
            - v1-poetry-api-deps-
      - restore_cache:
          keys:
            - v1-poetry-aw-deps-{{ checksum "adapter-worker/poetry.lock" }}
            - v1-poetry-aw-deps-
      - run:
          name: Run tox tests
          command: .circleci/run_tox_tests.sh
      - save_cache:
          key: v1-poetry-api-deps-{{ checksum "api/poetry.lock" }}
          paths:
            - api/.tox
      - save_cache:
          key: v1-poetry-aw-deps-{{ checksum "adapter-worker/poetry.lock" }}
          paths:
            - adapter-worker/.tox
  test-ui:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-yarn-ui-deps-{{ checksum "api/dhos_knifewrench_ui/yarn.lock" }}
            - v1-yarn-ui-deps-
      - run:
          name: Run JS tests
          command: .circleci/run_js_tests.sh
      - save_cache:
          key: v1-yarn-ui-deps-{{ checksum "api/dhos_knifewrench_ui/yarn.lock" }}
          paths:
            - api/dhos_knifewrench_ui/node_modules

  integration-test:
    docker:
      - image: cimg/python:3.9
    environment:
      <<: *SERVICE_FOLDERS
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Run the integration test script
          command: .circleci/run_integration_tests.sh

  deploy-dev:
    docker:
      - image: cimg/python:3.9
    environment:
      <<: *SERVICE_FOLDERS
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Add build information
          command: .circleci/record_build_info.sh
      - run:
          name: Build docker images
          command: |
            docker build api -t polaris-knifewrench-api
            docker build adapter-worker -t polaris-knifewrench-adapter-worker
      - run:
          name: Tag docker images
          command: |
            docker tag polaris-knifewrench-api ghcr.io/polaris-foundation/polaris-knifewrench-api:latest
            docker tag polaris-knifewrench-api ghcr.io/polaris-foundation/polaris-knifewrench-api:cb-${CIRCLE_BUILD_NUM}
            docker tag polaris-knifewrench-api ghcr.io/polaris-foundation/polaris-knifewrench-api:$(git log --pretty=format:'%h' -n 1)
            docker tag polaris-knifewrench-adapter-worker ghcr.io/polaris-foundation/polaris-knifewrench-adapter-worker:latest
            docker tag polaris-knifewrench-adapter-worker ghcr.io/polaris-foundation/polaris-knifewrench-adapter-worker:cb-${CIRCLE_BUILD_NUM}
            docker tag polaris-knifewrench-adapter-worker ghcr.io/polaris-foundation/polaris-knifewrench-adapter-worker:$(git log --pretty=format:'%h' -n 1)
      - run:
          name: Authenticate to GHCR
          command: echo $GHCR_TOKEN | docker login ghcr.io -u jonadaly --password-stdin
      - run:
          name: Push docker images
          command: |
            docker push ghcr.io/polaris-foundation/polaris-knifewrench-api:latest
            docker push ghcr.io/polaris-foundation/polaris-knifewrench-api:cb-${CIRCLE_BUILD_NUM}
            docker push ghcr.io/polaris-foundation/polaris-knifewrench-api:$(git log --pretty=format:'%h' -n 1)
            docker push ghcr.io/polaris-foundation/polaris-knifewrench-adapter-worker:latest
            docker push ghcr.io/polaris-foundation/polaris-knifewrench-adapter-worker:cb-${CIRCLE_BUILD_NUM}
            docker push ghcr.io/polaris-foundation/polaris-knifewrench-adapter-worker:$(git log --pretty=format:'%h' -n 1)

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - test:
          context: polaris-foundation
      - test-ui:
          context: polaris-foundation
      - integration-test:
          context: polaris-foundation
      - deploy-dev:
          context: polaris-foundation
          requires:
            - test
            - test-ui
            - integration-test
          filters:
            branches:
              only:
                - main
